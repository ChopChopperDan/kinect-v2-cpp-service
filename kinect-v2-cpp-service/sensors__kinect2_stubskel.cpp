//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "sensors__kinect2_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace sensors
{
namespace kinect2
{
std::string sensors__kinect2Factory::GetServiceName()
{
return "sensors.kinect2";
}
std::string sensors__kinect2Factory::DefString()
{
std::string out(
"service sensors.kinect2\n"
"\n"
"option version 0.5\n"
"\n"
"#struct PointCloud\n"
"#	field uint64 n_points\n"
"#	field single[] points\n"
"#	field uint8[] RGB_data\n"
"#end struct\n"
"\n"
"\n"
"\n"
"struct KinectBody\n"
"\n"
"option constant uint8 HAND_LEFT 0\n"
"option constant uint8 HAND_RIGHT 1\n"
"\n"
"field uint64 tracking_id\n"
"field uint8 tracked\n"
"field double[] lean\n"
"field double[] joint_positions\n"
"field double[] joint_orientations\n"
"field uint8[] joint_tracking_state\n"
"field uint8[] hand_state\n"
"field uint8[] hand_confidence\n"
"\n"
"end struct\n"
"\n"
"\n"
"\n"
"struct KinectMultiSource\n"
"field uint8 Color\n"
"field uint8 Depth\n"
"field uint8 Infrared\n"
"field uint8 Body\n"
"field uint8 BodyIndex\n"
"field uint8 LongExposureInfrared\n"
"end struct\n"
"\n"
"struct Image\n"
"field int32 width\n"
"field int32 height\n"
"field int32 channels\n"
"field uint8[] data\n"
"end struct\n"
"\n"
"struct DepthImage\n"
"field int32 width\n"
"field int32 height\n"
"field int32 channels\n"
"field uint16[] data\n"
"end struct\n"
"\n"
"struct ImageHeader\n"
"field int32 width\n"
"field int32 height\n"
"field int32 channels\n"
"field uint8 step\n"
"end struct\n"
"\n"
"object Kinect\n"
"\n"
"\n"
"function uint8 EnableSensors(KinectMultiSource s)\n"
"function uint8 DisableSensors()\n"
"function KinectMultiSource SensorsEnabled()\n"
"\n"
"function ImageHeader getColorImageHeader()\n"
"function ImageHeader getDepthImageHeader()\n"
"\n"
"function Image getCurrentColorImage()\n"
"function DepthImage getCurrentDepthImage()\n"
"function DepthImage getCurrentInfraredImage()\n"
"function Image getCurrentBodyIndexImage()\n"
"function DepthImage getCurrentLongExposureInfraredImage()\n"
"\n"
"function uint64[6] getTrackedBodyIDs()\n"
"function KinectBody getDetectedBody(int32 index)\n"
"#function double[3] getGroundPlaneOrientation\n"
"\n"
"#function uint8 EnablePointCloudGeneration(uint8 with_color)\n"
"#function uint8 DisablePointCloudGeneration()\n"
"#function PointCloud getCurrentPointCloud()\n"
"\n"
"end object\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> sensors__kinect2Factory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="KinectBody") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<KinectBody_stub>(GetNode()));
if (objecttype=="KinectMultiSource") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<KinectMultiSource_stub>(GetNode()));
if (objecttype=="Image") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<Image_stub>(GetNode()));
if (objecttype=="DepthImage") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<DepthImage_stub>(GetNode()));
if (objecttype=="ImageHeader") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<ImageHeader_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> sensors__kinect2Factory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "sensors.kinect2") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> sensors__kinect2Factory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "sensors.kinect2") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> sensors__kinect2Factory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "sensors.kinect2") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="Kinect") { RR_SHARED_PTR<Kinect_stub> o=(RR_MAKE_SHARED<Kinect_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> sensors__kinect2Factory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "sensors.kinect2") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="Kinect") {RR_SHARED_PTR<Kinect_skel> o=RR_MAKE_SHARED<Kinect_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void sensors__kinect2Factory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "sensors.kinect2") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> sensors__kinect2Factory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "sensors.kinect2") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> KinectBody_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<KinectBody > s2=RobotRaconteur::rr_cast<KinectBody >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("tracking_id",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint64_t >(s2->tracking_id))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("tracked",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->tracked))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("lean",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->lean)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("joint_positions",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->joint_positions)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("joint_orientations",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->joint_orientations)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("joint_tracking_state",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->joint_tracking_state)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("hand_state",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->hand_state)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("hand_confidence",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->hand_confidence)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("sensors.kinect2.KinectBody",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> KinectBody_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<KinectBody > ret=RR_MAKE_SHARED<KinectBody >();
ret->tracking_id=RobotRaconteur::RRArrayToScalar<uint64_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"tracking_id")->CastData<RobotRaconteur::RRArray<uint64_t > >());
ret->tracked=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"tracked")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->lean=RobotRaconteur::MessageElement::FindElement(m->Elements,"lean")->CastData<RobotRaconteur::RRArray<double > >();
ret->joint_positions=RobotRaconteur::MessageElement::FindElement(m->Elements,"joint_positions")->CastData<RobotRaconteur::RRArray<double > >();
ret->joint_orientations=RobotRaconteur::MessageElement::FindElement(m->Elements,"joint_orientations")->CastData<RobotRaconteur::RRArray<double > >();
ret->joint_tracking_state=RobotRaconteur::MessageElement::FindElement(m->Elements,"joint_tracking_state")->CastData<RobotRaconteur::RRArray<uint8_t > >();
ret->hand_state=RobotRaconteur::MessageElement::FindElement(m->Elements,"hand_state")->CastData<RobotRaconteur::RRArray<uint8_t > >();
ret->hand_confidence=RobotRaconteur::MessageElement::FindElement(m->Elements,"hand_confidence")->CastData<RobotRaconteur::RRArray<uint8_t > >();
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> KinectMultiSource_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<KinectMultiSource > s2=RobotRaconteur::rr_cast<KinectMultiSource >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("Color",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->Color))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("Depth",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->Depth))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("Infrared",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->Infrared))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("Body",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->Body))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("BodyIndex",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->BodyIndex))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("LongExposureInfrared",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->LongExposureInfrared))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("sensors.kinect2.KinectMultiSource",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> KinectMultiSource_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<KinectMultiSource > ret=RR_MAKE_SHARED<KinectMultiSource >();
ret->Color=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"Color")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->Depth=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"Depth")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->Infrared=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"Infrared")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->Body=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"Body")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->BodyIndex=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"BodyIndex")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->LongExposureInfrared=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"LongExposureInfrared")->CastData<RobotRaconteur::RRArray<uint8_t > >());
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> Image_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<Image > s2=RobotRaconteur::rr_cast<Image >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("width",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->width))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("height",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->height))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("channels",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->channels))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("data",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->data)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("sensors.kinect2.Image",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> Image_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<Image > ret=RR_MAKE_SHARED<Image >();
ret->width=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"width")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->height=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"height")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->channels=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"channels")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->data=RobotRaconteur::MessageElement::FindElement(m->Elements,"data")->CastData<RobotRaconteur::RRArray<uint8_t > >();
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> DepthImage_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<DepthImage > s2=RobotRaconteur::rr_cast<DepthImage >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("width",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->width))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("height",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->height))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("channels",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->channels))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("data",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->data)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("sensors.kinect2.DepthImage",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> DepthImage_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<DepthImage > ret=RR_MAKE_SHARED<DepthImage >();
ret->width=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"width")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->height=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"height")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->channels=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"channels")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->data=RobotRaconteur::MessageElement::FindElement(m->Elements,"data")->CastData<RobotRaconteur::RRArray<uint16_t > >();
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> ImageHeader_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<ImageHeader > s2=RobotRaconteur::rr_cast<ImageHeader >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("width",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->width))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("height",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->height))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("channels",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->channels))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("step",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->step))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("sensors.kinect2.ImageHeader",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> ImageHeader_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<ImageHeader > ret=RR_MAKE_SHARED<ImageHeader >();
ret->width=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"width")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->height=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"height")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->channels=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"channels")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->step=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"step")->CastData<RobotRaconteur::RRArray<uint8_t > >());
return ret;
}

Kinect_stub::Kinect_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void Kinect_stub::RRInitStub()
{
}

uint8_t Kinect_stub::EnableSensors(RR_SHARED_PTR<KinectMultiSource > s)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"EnableSensors");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("s",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(s)))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::RRArrayToScalar<uint8_t >(rr_me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}

uint8_t Kinect_stub::DisableSensors()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"DisableSensors");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::RRArrayToScalar<uint8_t >(rr_me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}

RR_SHARED_PTR<KinectMultiSource > Kinect_stub::SensorsEnabled()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"SensorsEnabled");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<KinectMultiSource >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<ImageHeader > Kinect_stub::getColorImageHeader()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getColorImageHeader");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<ImageHeader >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<ImageHeader > Kinect_stub::getDepthImageHeader()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getDepthImageHeader");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<ImageHeader >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<Image > Kinect_stub::getCurrentColorImage()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentColorImage");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<Image >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<DepthImage > Kinect_stub::getCurrentDepthImage()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentDepthImage");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<DepthImage >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<DepthImage > Kinect_stub::getCurrentInfraredImage()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentInfraredImage");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<DepthImage >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<Image > Kinect_stub::getCurrentBodyIndexImage()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentBodyIndexImage");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<Image >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<DepthImage > Kinect_stub::getCurrentLongExposureInfraredImage()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentLongExposureInfraredImage");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<DepthImage >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > > Kinect_stub::getTrackedBodyIDs()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getTrackedBodyIDs");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return rr_me->CastData<RobotRaconteur::RRArray<uint64_t > >();
}

RR_SHARED_PTR<KinectBody > Kinect_stub::getDetectedBody(int32_t index)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getDetectedBody");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("index",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(index))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<KinectBody >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

void Kinect_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void Kinect_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void Kinect_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>Kinect_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string Kinect_stub::RRType()
{
return "sensors.kinect2.Kinect";
}
void Kinect_stub::RRClose()
{
ServiceStub::RRClose();
}

void Kinect_stub::async_EnableSensors(RR_SHARED_PTR<KinectMultiSource > s,boost::function<void (uint8_t, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"EnableSensors");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("s",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(s)))));
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_EnableSensors, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_EnableSensors(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (uint8_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
uint8_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::RRArrayToScalar<uint8_t >(me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_DisableSensors(boost::function<void (uint8_t, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"DisableSensors");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_DisableSensors, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_DisableSensors(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (uint8_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
uint8_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::RRArrayToScalar<uint8_t >(me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_SensorsEnabled(boost::function<void (RR_SHARED_PTR<KinectMultiSource >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"SensorsEnabled");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_SensorsEnabled, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_SensorsEnabled(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<KinectMultiSource > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<KinectMultiSource >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<KinectMultiSource >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<KinectMultiSource > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<KinectMultiSource >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<KinectMultiSource >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<KinectMultiSource >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_getColorImageHeader(boost::function<void (RR_SHARED_PTR<ImageHeader >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getColorImageHeader");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_getColorImageHeader, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_getColorImageHeader(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<ImageHeader > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<ImageHeader >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<ImageHeader >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<ImageHeader > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<ImageHeader >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<ImageHeader >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<ImageHeader >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_getDepthImageHeader(boost::function<void (RR_SHARED_PTR<ImageHeader >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getDepthImageHeader");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_getDepthImageHeader, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_getDepthImageHeader(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<ImageHeader > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<ImageHeader >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<ImageHeader >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<ImageHeader > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<ImageHeader >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<ImageHeader >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<ImageHeader >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_getCurrentColorImage(boost::function<void (RR_SHARED_PTR<Image >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentColorImage");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_getCurrentColorImage, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_getCurrentColorImage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<Image > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<Image >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<Image >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<Image > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<Image >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<Image >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<Image >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_getCurrentDepthImage(boost::function<void (RR_SHARED_PTR<DepthImage >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentDepthImage");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_getCurrentDepthImage, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_getCurrentDepthImage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<DepthImage > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<DepthImage >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<DepthImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<DepthImage > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<DepthImage >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<DepthImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<DepthImage >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_getCurrentInfraredImage(boost::function<void (RR_SHARED_PTR<DepthImage >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentInfraredImage");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_getCurrentInfraredImage, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_getCurrentInfraredImage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<DepthImage > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<DepthImage >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<DepthImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<DepthImage > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<DepthImage >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<DepthImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<DepthImage >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_getCurrentBodyIndexImage(boost::function<void (RR_SHARED_PTR<Image >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentBodyIndexImage");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_getCurrentBodyIndexImage, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_getCurrentBodyIndexImage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<Image > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<Image >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<Image >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<Image > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<Image >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<Image >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<Image >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_getCurrentLongExposureInfraredImage(boost::function<void (RR_SHARED_PTR<DepthImage >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentLongExposureInfraredImage");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_getCurrentLongExposureInfraredImage, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_getCurrentLongExposureInfraredImage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<DepthImage > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<DepthImage >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<DepthImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<DepthImage > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<DepthImage >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<DepthImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<DepthImage >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_getTrackedBodyIDs(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getTrackedBodyIDs");
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_getTrackedBodyIDs, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_getTrackedBodyIDs(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=me->CastData<RobotRaconteur::RRArray<uint64_t > >();
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Kinect_stub::async_getDetectedBody(int32_t index,boost::function<void (RR_SHARED_PTR<KinectBody >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getDetectedBody");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("index",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(index))));
AsyncProcessTransaction(rr_req,boost::bind(&Kinect_stub::rrend_getDetectedBody, RobotRaconteur::rr_cast<Kinect_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Kinect_stub::rrend_getDetectedBody(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<KinectBody > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<KinectBody >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<KinectBody >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<KinectBody > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<KinectBody >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<KinectBody >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<KinectBody >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}

void Kinect_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<sensors::kinect2::Kinect > Kinect_skel::get_obj()
{
return RobotRaconteur::rr_cast<sensors::kinect2::Kinect >(uncastobj);
}
RR_SHARED_PTR<sensors::kinect2::async_Kinect > Kinect_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<sensors::kinect2::async_Kinect >(uncastobj);
}
void Kinect_skel::ReleaseCastObject() 
{
}
std::string Kinect_skel::GetObjectType()
{
return "sensors.kinect2.Kinect";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> Kinect_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<sensors::kinect2::async_Kinect > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Kinect_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<sensors::kinect2::async_Kinect > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Kinect_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<sensors::kinect2::async_Kinect > async_obj=get_asyncobj();
if (rr_m->MemberName == "EnableSensors")
{
RR_SHARED_PTR<KinectMultiSource > s =RobotRaconteur::rr_cast<KinectMultiSource >(RRGetNode()->UnpackStructure(rr_m->FindElement("s")->CastData<RobotRaconteur::MessageElementStructure>()));
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_EnableSensors(s, boost::bind(&sensors::kinect2::Kinect_skel::rr_EnableSensors, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
uint8_t rr_return=get_obj()->EnableSensors(s);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(rr_return))));
return rr_mr;
}
}
if (rr_m->MemberName == "DisableSensors")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_DisableSensors(boost::bind(&sensors::kinect2::Kinect_skel::rr_DisableSensors, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
uint8_t rr_return=get_obj()->DisableSensors();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(rr_return))));
return rr_mr;
}
}
if (rr_m->MemberName == "SensorsEnabled")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_SensorsEnabled(boost::bind(&sensors::kinect2::Kinect_skel::rr_SensorsEnabled, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<KinectMultiSource > rr_return=get_obj()->SensorsEnabled();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getColorImageHeader")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_getColorImageHeader(boost::bind(&sensors::kinect2::Kinect_skel::rr_getColorImageHeader, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<ImageHeader > rr_return=get_obj()->getColorImageHeader();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getDepthImageHeader")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_getDepthImageHeader(boost::bind(&sensors::kinect2::Kinect_skel::rr_getDepthImageHeader, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<ImageHeader > rr_return=get_obj()->getDepthImageHeader();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getCurrentColorImage")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_getCurrentColorImage(boost::bind(&sensors::kinect2::Kinect_skel::rr_getCurrentColorImage, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<Image > rr_return=get_obj()->getCurrentColorImage();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getCurrentDepthImage")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_getCurrentDepthImage(boost::bind(&sensors::kinect2::Kinect_skel::rr_getCurrentDepthImage, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<DepthImage > rr_return=get_obj()->getCurrentDepthImage();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getCurrentInfraredImage")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_getCurrentInfraredImage(boost::bind(&sensors::kinect2::Kinect_skel::rr_getCurrentInfraredImage, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<DepthImage > rr_return=get_obj()->getCurrentInfraredImage();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getCurrentBodyIndexImage")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_getCurrentBodyIndexImage(boost::bind(&sensors::kinect2::Kinect_skel::rr_getCurrentBodyIndexImage, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<Image > rr_return=get_obj()->getCurrentBodyIndexImage();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getCurrentLongExposureInfraredImage")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_getCurrentLongExposureInfraredImage(boost::bind(&sensors::kinect2::Kinect_skel::rr_getCurrentLongExposureInfraredImage, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<DepthImage > rr_return=get_obj()->getCurrentLongExposureInfraredImage();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getTrackedBodyIDs")
{
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_getTrackedBodyIDs(boost::bind(&sensors::kinect2::Kinect_skel::rr_getTrackedBodyIDs, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > > rr_return=get_obj()->getTrackedBodyIDs();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(rr_return)));
return rr_mr;
}
}
if (rr_m->MemberName == "getDetectedBody")
{
int32_t index =RobotRaconteur::RRArrayToScalar<int32_t >(rr_m->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t > >());
if (async_obj)
{
RR_WEAK_PTR<sensors::kinect2::Kinect_skel> rr_wp=RobotRaconteur::rr_cast<sensors::kinect2::Kinect_skel>(shared_from_this());
async_obj->async_getDetectedBody(index, boost::bind(&sensors::kinect2::Kinect_skel::rr_getDetectedBody, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<KinectBody > rr_return=get_obj()->getDetectedBody(index);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Kinect_skel::rr_EnableSensors(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, uint8_t ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(ret)));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_DisableSensors(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, uint8_t ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(ret)));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_SensorsEnabled(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<KinectMultiSource > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_getColorImageHeader(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<ImageHeader > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_getDepthImageHeader(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<ImageHeader > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_getCurrentColorImage(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<Image > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_getCurrentDepthImage(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<DepthImage > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_getCurrentInfraredImage(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<DepthImage > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_getCurrentBodyIndexImage(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<Image > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_getCurrentLongExposureInfraredImage(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<DepthImage > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_getTrackedBodyIDs(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<RobotRaconteur::RRArray<uint64_t > > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(ret));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::rr_getDetectedBody(RR_WEAK_PTR<sensors::kinect2::Kinect_skel> skel, RR_SHARED_PTR<KinectBody > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<sensors::kinect2::Kinect_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Kinect_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<sensors::kinect2::Kinect > obj=RobotRaconteur::rr_cast<sensors::kinect2::Kinect >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void Kinect_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> Kinect_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Kinect_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<sensors::kinect2::Kinect > obj=RobotRaconteur::rr_cast<sensors::kinect2::Kinect >(rrobj1);
}

void Kinect_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Kinect_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Kinect_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<sensors::kinect2::Kinect > obj=RobotRaconteur::rr_cast<sensors::kinect2::Kinect >(rrobj1);
}

void Kinect_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Kinect_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Kinect_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<sensors::kinect2::Kinect > obj=RobotRaconteur::rr_cast<sensors::kinect2::Kinect >(o);
}
RR_SHARED_PTR<void> Kinect_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Kinect_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
}
}

